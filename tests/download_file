#!/usr/bin/env python3
"""
Download a file from the database by filename
Usage: python scripts/download_file <filename>
"""

import asyncio
import sys
from pathlib import Path

import asyncpg

DATABASE_URL = "postgresql://root:pass@localhost:5432/rentease_db_dev"


async def download_file(filename):
    """Download a file from the database."""
    try:
        conn = await asyncpg.connect(DATABASE_URL)

        # Get file from database
        file_record = await conn.fetchrow(
            """
            SELECT filename, mimetype, size, data, uploaded_at
            FROM files
            WHERE filename = $1
        """,
            filename,
        )

        if not file_record:
            print(f"‚ùå File '{filename}' not found in database")
            await conn.close()
            return

        # Create downloads directory in tests folder
        downloads_dir = Path(__file__).parent / "downloads"
        downloads_dir.mkdir(exist_ok=True)

        # Save file
        file_path = downloads_dir / filename
        with open(file_path, "wb") as f:
            f.write(file_record["data"])

        print(f"‚úÖ Downloaded: {filename}")
        print(f"   üìÅ Saved to: {file_path.absolute()}")
        print(f"   üìä Size: {file_record['size']} bytes")
        print(f"   üìÑ Type: {file_record['mimetype']}")
        print(f"   üìÖ Uploaded: {file_record['uploaded_at']}")

        await conn.close()

    except Exception as e:
        print(f"‚ùå Error downloading file: {e}")


async def list_files():
    """List all files in the database."""
    try:
        conn = await asyncpg.connect(DATABASE_URL)

        files = await conn.fetch(
            """
            SELECT filename, mimetype, size, uploaded_at
            FROM files
            ORDER BY filename
        """
        )

        if not files:
            print("üìÅ No files found in database")
        else:
            print("üìÅ Files in database:")
            print("-" * 50)
            for file in files:
                print(f"   üìÑ {file['filename']}")
                print(f"      Type: {file['mimetype']}")
                print(f"      Size: {file['size']} bytes")
                print(f"      Uploaded: {file['uploaded_at']}")
                print()

        await conn.close()

    except Exception as e:
        print(f"‚ùå Error listing files: {e}")


async def main():
    if len(sys.argv) < 2:
        print("Usage:")
        print("  python tests/download_file <filename>  - Download specific file")
        print("  python tests/download_file --list      - List all files")
        return

    if sys.argv[1] == "--list":
        await list_files()
    else:
        filename = sys.argv[1]
        await download_file(filename)


if __name__ == "__main__":
    asyncio.run(main())
