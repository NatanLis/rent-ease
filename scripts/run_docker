#!/bin/bash

function green(){
    echo -e "\x1B[32m$1\x1B[0m"
}

function blue(){
    echo -e "\x1B[34m$1\x1B[0m"
}

function yellow(){
    echo -e "\x1B[33m$1\x1B[0m"
}

WORKING_DIR="$(cd "$(dirname "$0")" && pwd)/.."

# Verify working directory exists
echo "🔍 Working directory: $WORKING_DIR"
if [ ! -d "$WORKING_DIR" ]; then
    echo "❌ Error: Working directory '$WORKING_DIR' does not exist"
    exit 1
fi

# Check if conda environment is active FIRST
if [ -z "$CONDA_DEFAULT_ENV" ] || [ "$CONDA_DEFAULT_ENV" != "rent-ease" ]; then
    yellow "⚠️  Conda environment 'rent-ease' is not active!"
    echo ""
    echo "🔧 SOLUTION: Activate the environment first:"
    echo "   conda activate rent-ease"
    echo ""
    echo "   Then run this script again:"
    echo "   ./scripts/run_docker"
    echo ""
    exit 1
fi

green "✅ Conda environment 'rent-ease' is active"

green "=== Starting Docker for Rent-Ease ==="

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    yellow "⚠️  Docker is not running. Attempting to start Docker service..."
    
    # Try to start Docker service (for Linux/WSL)
    if command -v systemctl > /dev/null 2>&1; then
        blue "=== Starting Docker service with systemctl... ==="
        sudo systemctl start docker
        sleep 5
    elif command -v service > /dev/null 2>&1; then
        blue "=== Starting Docker service with service command... ==="
        sudo service docker start
        sleep 5
    else
        echo "❌ Cannot start Docker service automatically."
        echo "Please start Docker manually:"
        echo "   sudo systemctl start docker"
        echo "   or"
        echo "   sudo service docker start"
        exit 1
    fi
    
    # Wait for Docker to be ready
    blue "=== Waiting for Docker to be ready... ==="
    for i in {1..30}; do
        if docker info > /dev/null 2>&1; then
            green "✅ Docker is now running!"
            break
        fi
        echo "⏳ Waiting for Docker to be ready... ($i/30)"
        sleep 2
    done
    
    if ! docker info > /dev/null 2>&1; then
        echo "❌ Docker failed to start within 1 minute."
        echo "Please check Docker status manually:"
        echo "   sudo systemctl status docker"
        echo "   or"
        echo "   sudo service docker status"
        exit 1
    fi
else
    green "✅ Docker is already running"
fi

cd "$WORKING_DIR/docker"

blue "=== Starting PostgreSQL database ==="

# Check if container exists and has correct configuration
if docker ps -a | grep -q "RentEaseDBcontainer"; then
    yellow "⚠️  PostgreSQL container already exists. Checking configuration..."
    
    # Check if we need to recreate container (e.g., if config changed)
    if docker inspect RentEaseDBcontainer | grep -q '"POSTGRES_USER": "root"' && \
       docker inspect RentEaseDBcontainer | grep -q '"POSTGRES_PASSWORD": "pass"'; then
        blue "✅ Container configuration is correct, starting existing container..."
        docker-compose up -d postgres
    else
        yellow "⚠️  Container configuration mismatch. Removing old container..."
        docker-compose down postgres
        docker rm -f RentEaseDBcontainer 2>/dev/null || true
        blue "🔄 Creating new container with correct configuration..."
        docker-compose up -d postgres
    fi
else
    blue "🆕 Creating new PostgreSQL container..."
    docker-compose up -d postgres
fi

blue "=== Waiting for database to be ready... ==="

# Wait for PostgreSQL to be actually ready (not just container running)
blue "🔍 Checking if PostgreSQL is accepting connections..."
for i in {1..30}; do
    if docker exec RentEaseDBcontainer pg_isready -U root > /dev/null 2>&1; then
        green "✅ PostgreSQL is ready and accepting connections!"
        break
    fi
    echo "⏳ Waiting for PostgreSQL to be ready... ($i/30)"
    sleep 2
done

# Final check
if ! docker exec RentEaseDBcontainer pg_isready -U root > /dev/null 2>&1; then
    echo "❌ PostgreSQL failed to become ready within 1 minute."
    echo "Please check container logs: docker logs RentEaseDBcontainer"
    exit 1
fi

blue "=== Database is ready! ==="
echo "📊 PostgreSQL running on port 5432"
echo "🔑 Username: root"
echo "🔑 Password: pass"
echo "🗄️  Databases: rentease_db_dev, rentease_db_test"

# Check if databases exist and setup if needed
blue "=== Checking database setup... ==="
# Return to project root for database setup
cd "$WORKING_DIR"

# Check if setup_database.py exists, if not, just show success message
if [ -f "scripts/setup_database.py" ]; then
    if python scripts/setup_database.py; then
        green "✅ Database setup completed successfully!"
    else
        yellow "⚠️  Database setup failed. You may need to run it manually:"
        echo "   python scripts/setup_database.py"
    fi
else
    green "✅ Database container is ready!"
    echo "💡 You can now run migrations with: alembic upgrade head"
fi

green "=== Now you can run application ==="
echo "🚀 Run: ./scripts/run_dev"
