#!/usr/bin/env python

import sys
import os
import subprocess
import time
from honcho.manager import Manager

def check_docker():
    """Check if Docker is running"""
    try:
        subprocess.run(["docker", "info"], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def check_conda_environment():
    """Check if rent-ease conda environment is active"""
    # Check environment variable first
    conda_env = os.environ.get('CONDA_DEFAULT_ENV')
    if conda_env == 'rent-ease':
        return True
    
    # Fallback: check if we're in a conda environment
    try:
        # Check if we're in a conda environment
        result = subprocess.run(["conda", "info", "--envs"], capture_output=True, text=True, check=True)
        
        # Look for active environment (marked with *)
        for line in result.stdout.split('\n'):
            if '*' in line and 'rent-ease' in line:
                return True
        
        return False
    except:
        return False

def start_database():
    """Start database using Docker Compose"""
    print("🐳 Starting PostgreSQL database...")
    
    # Go to docker folder
    docker_dir = os.path.join(os.path.dirname(__file__), "..", "docker")
    os.chdir(docker_dir)
    
    # Start PostgreSQL
    try:
        subprocess.run(["docker-compose", "up", "-d", "postgres"], check=True)
        print("✅ PostgreSQL started")
        
        # Wait for database to be ready
        print("⏳ Waiting for database to be ready...")
        time.sleep(10)
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"❌ Error starting database: {e}")
        return False

if __name__ == "__main__":
    print("🚀 Starting Rent-Ease...")
    
    # Check if conda environment is active
    if not check_conda_environment():
        print("❌ ERROR: rent-ease conda environment is not active!")
        print("")
        print("🔧 SOLUTION: Activate the environment first:")
        print("   conda activate rent-ease")
        print("")
        print("   Then run this script again:")
        print("   python scripts/run_dev")
        print("")
        sys.exit(1)
    
    print("✅ Conda environment 'rent-ease' is active")
    
    # Check Docker
    if not check_docker():
        print("❌ Docker is not running. Start Docker Desktop and try again.")
        sys.exit(1)
    
    # Check if database is running (don't start it)
    print("🔍 Checking if database is running...")
    try:
        # Simple check if postgres container is running
        result = subprocess.run(["docker", "ps", "--filter", "name=RentEaseDBcontainer", "--format", "{{.Names}}"], 
                              capture_output=True, text=True, check=True)
        if "RentEaseDBcontainer" not in result.stdout:
            print("❌ Database is not running. Please run './scripts/run_docker' first.")
            sys.exit(1)
        print("✅ Database is running")
    except subprocess.CalledProcessError:
        print("❌ Database is not running. Please run './scripts/run_docker' first.")
        sys.exit(1)
    
    # Return to main folder
    os.chdir(os.path.join(os.path.dirname(__file__), ".."))
    
    # Start backend and frontend
    manager = Manager()
    
    # Check operating system
    if os.name == 'nt':  # Windows
        client_command = "cd client && set ENV=dev && yarn dev"
        server_command = (
            "set ENV=dev && uvicorn api.main:app "
            "--reload "
            "--reload-exclude=client/* "
            "--port 8000"
        )
    else:  # Unix-like system (Linux, macOS)
        client_command = "cd client && ENV=dev yarn dev"
        server_command = (
            "ENV=dev uvicorn api.main:app "
            "--reload "
            "--reload-exclude=client/* "
            "--port 8000"
        )

    print("🔧 Starting backend...")
    manager.add_process("server", server_command)
    
    print("🎨 Starting frontend...")
    manager.add_process("client", client_command)

    print("✅ Everything started! Check:")
    print("   🌐 Frontend: http://localhost:3000")
    print("   🔌 Backend: http://localhost:8000")
    print("   🔧 Swagger: http://localhost:8000/docs#/")
    print("   📊 Database: localhost:5432")
    
    # Run both processes concurrently
    manager.loop()
    sys.exit(manager.returncode)